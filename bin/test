#!/usr/bin/env node

/* Terminal Colors

\033[MODIFICATOR;COLORm

COLORS

0        - Reset

30       - Black
31       - Red
32       - Green
33       - Yellow
34       - Blue
35       - Purple
36       - Cyan
37       - White

10+COLOR - Background

60+COLOR - High Intensity

70+COLOR - High Intensity backgrounds

MODIFICATORS

0        - Regular
1        - Bold
4        - Underline

*/

var fs = require('fs')
  , parse = require('../lib/boss.js').parse
  , Env = require('../lib/env.js')
  , dir = __dirname + '/../test'
  , list = fs.readdirSync(dir)
  , ok = 0
  , total = 0
  , files = {}
  , failed = []
  , name, src, res, env, b

list.forEach(function(path) {
  var i = path.lastIndexOf('.')
    , name, ext

  if (i !== -1) {
    ext = path.substring(i + 1)
    name = path.substring(0, i)
    if (!(name in files))
      files[name] = {}
    files[name][ext] = true
  }
})

for (name in files) {
  if (files[name].boss) {
    env = new Env
    src = readFile(name + '.boss')
    total++
    res = (b = parse(src).eval(env).toString(env).trim()) == readFile(name + '.css').trim()
    res && ok++
    if (!res) {
      out('\033[31m-\033[0m')
      failed.push(name)
    } else {
      out('\033[32m.\033[0m')
    }
  }
}

process.stdout.write('\n\n')

if (!failed.length) {
  out('\033[32m✔ ')
} else if (failed.length / total <= 0.1) { // < 10% failed
  out('\033[33m✖ ')
} else {
  out('\033[31m✖ ')
}

out(total + ' tests completed\033[0m')

if (failed.length) {
  out(' \033[31m(' + failed.length + ' failed)\n')
  failed.forEach(function(test){
    out('  - ' + test + '\n')
  })
  out('\n')
} else {
  out('\n\n')
}

function out(str) {
  process.stdout.write(str)
}

function readFile(path) {
    return fs.readFileSync(dir + '/' + path).toString();
}