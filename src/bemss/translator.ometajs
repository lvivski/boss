var CSSTranslator = require("../css/translator").CSSTranslator;

var nodes = require("../nodes");

ometa BEMSSTranslator <: CSSTranslator {

  any = before
      | ident
      | atkeyword
      | string
      | shash
      | vhash
      | number
      | percentage
      | dimension
      | cdo
      | cdc
      | decldelim
      | s
      | attrselector
      | attrib
      | nth
      | nthselector
      | namespace
      | clazz
      | pseudoe
      | pseudoc
      | delim
      | stylesheet
      | atruleb
      | atrules
      | atrulerq
      | atrulers
      | atruler
      | block
      | ruleset
      | combinator
      | simpleselector
      | selector
      | declaration
      | property
      | important
      | binary
      | unary
      | operator
      | braces
      | value
      | progid
      | filterv
      | filter
      | comment
      | uri
      | raw
      | functionBody
      | funktion
      | functionExpression
      | definition
      | assignment
      | variable
      | after,

  assignment = ['assignment':t any:x any:y] -> new nodes.Ident(x, y),

  vhash = ['vhash':t :x] -> new nodes.Color(x),

  dimension = ['dimension':t any:x any:y] -> new nodes.Dimension(x, y),

  percentage = ['percentage':t any:x] -> new nodes.Dimension(x, '%'),

  functionBody = ['functionBody' anys:x] -> { '' },

  funktion = ['funktion':t any:x any:y] -> new nodes.Call(x, y),

  definition = ['definition':t any:x any:y any:z] -> new nodes.Definition(x, y, z),

  binary = ['binary':t any:o any:x any:y] -> new nodes.BinOp(o, x, y),

  unary = ['unary':t any:o any:x] -> new nodes.Dimension(o + x, y),

  variable = ['variable':t any:x] -> new nodes.Ident(x)

}