var CSSTranslator = require("../css/translator").CSSTranslator;

var nodes = require("../nodes");

ometa BOSSTranslator <: CSSTranslator {

  any = before
      | ident
      | atkeyword
      | string
      | shash
      | vhash
      | number
      | percentage
      | dimension
      | cdo
      | cdc
      | decldelim
      | s
      | attrselector
      | attrib
      | nth
      | nthselector
      | namespace
      | clazz
      | pseudoe
      | pseudoc
      | delim
      | stylesheet
      | atruleb
      | atrules
      | atrulerq
      | atrulers
      | atruler
      | block
      | ruleset
      | combinator
      | simpleselector
      | selector
      | declaration
      | property
      | important
      | binary
      | unary
      | operator
      | braces
      | value
      | progid
      | filterv
      | filter
      | comment
      | uri
      | raw
      | functionBody
      | funktion
      | functionExpression
      | definition
      | assignment
      | variable
      | after,

  assignment = ['assignment' any:x any:y] -> new nodes.Ident(x.trim(), y),

  clazz = ['clazz' any:x] -> new nodes.Literal('.' + x),

  vhash = ['vhash' :x] -> new nodes.Color(x),

  dimension = ['dimension' any:x any:y] -> new nodes.Dimension(x, y),

  percentage = ['percentage' any:x] -> new nodes.Dimension(x, '%'),

  number = ['number' :x] -> new nodes.Dimension(x),

  funktion = ['funktion' any:x any:y] -> new nodes.Call(x, y),

  definition = ['definition' any:x any:y any:z] -> new nodes.Definition(x, y, z),

  binary = ['binary' any:o any:x any:y] -> new nodes.BinOp(o, x, y),

  unary = ['unary' any:o any:x] -> new nodes.Dimension(o + x, y),

  variable = ['variable' any:x] -> x,

  comment = ['comment' :x] -> new nodes.Comment(x),

  string = ['string' :x :y] -> new nodes.String(x, y),

  raw = ['raw' :x] -> new nodes.String(x),

  uri = ['uri' any:x] -> new nodes.Call('url', new nodes.Arguments(false, [x])),

  stylesheet = ['stylesheet' anys:x] -> new nodes.Stylesheet(x),

  block = ['block' anys:x] -> new nodes.Block(x),

  declaration = ['declaration' any:x any:y] -> new nodes.Declaration(x, y),

  simpleselector = ['simpleselector' anys:x] -> new nodes.Selector(x.join('')),

  selector = ['selector' anys:x] -> x.filter(function (selector) { return selector !== ',' }),

  ruleset = ['ruleset' any:x any:y] -> new nodes.Ruleset(x, y),

  ident = ['ident' :x] -> new nodes.Ident(x),

  pseudoc = ['pseudoc' any:x] -> (':' + x),

  value = ['value' anys:x] -> { var expr = new nodes.Expression,
                                    list;
                                x.forEach(function (node) {
                                  if (node === ' ') return;
                                  if (node === ',') {
                                    list = list || new nodes.Expression(true)
                                    list.push(expr)
                                    expr = new nodes.Expression
                                    return;
                                  }
                                  expr.push(node);
                                })

                                list && list.push(expr);

                                list || expr;
                              },

  functionBody = ['functionBody' anys:x] -> {
                                              var args = new nodes.Arguments,
                                                  list;

                                              x.forEach(function (node) {
                                                if (node === ' ') return;
                                                if (node === ',') {
                                                  list = list || new nodes.Arguments(true)
                                                  list.push(new nodes.Expression(false, args.nodes))
                                                  args = new nodes.Expression
                                                  return;
                                                }
                                                args.push(node);
                                              })

                                              list && list.push(args);

                                              list || args;
                                            },

}