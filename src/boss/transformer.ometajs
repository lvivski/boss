var CSSTransformer = require('../css/transformer').CSSTransformer;

ometa BOSSTransformer <: CSSTransformer {

  any = before
      | ident
      | atkeyword
      | string
      | shash
      | vhash
      | number
      | percentage
      | dimension
      | cdo
      | cdc
      | decldelim
      | s
      | attrselector
      | attrib
      | nth
      | nthselector
      | namespace
      | clazz
      | pseudoe
      | pseudoc
      | delim
      | stylesheet
      | atruleb
      | atrules
      | atrulerq
      | atrulers
      | atruler
      | block
      | ruleset
      | combinator
      | simpleselector
      | selector
      | declaration
      | property
      | important
      | binary
      | unary
      | operator
      | braces
      | value
      | progid
      | filterv
      | filter
      | comment
      | uri
      | raw
      | functionBody
      | funktion
      | functionExpression
      | definition
      | assignment
      | variable
      | after,

  assignment = ['assignment':t any:x any:y] -> [t, x, y],

  definition = ['definition':t any:x any:y any:z] -> [t, x, y, z],

  binary = ['binary':t any:o any:x any:y] -> [t, o, x, y],

  ruleset = ['ruleset':t any:x any:y] -> [t, x, y],

  unary = ['unary':t any:o any:x] -> [t, o, x],

  variable = ['variable':t any:v] -> [t, v],

  string = ['string':t :x :y] -> [t, x, y],

  stylesheet = ['stylesheet':t anys:x] -> [t].concat( filter(x) ),

  atrulers = ['atrulers':t anys:x] -> [t].concat( filter(x) ),

  value = ['value':t anys:x] -> [t].concat( filter(x) ),

  property = ['property':t anys:x] -> [t].concat( filter(x) ),

  functionBody = ['functionBody':t anys:x] -> [t].concat( filter(x) )

}

var filter = function (arr) {
  return arr.filter(function (any) { return any[0] !== 's' })
}