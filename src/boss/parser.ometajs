var CSSParser = require('../css/parser').CSSParser;

ometa BOSSParser <: CSSParser {

  statement = definition | ruleset | atrule | assignment,

  definition = ident:x '(' functionBody:y ')' sc* block:z -> [#definition, x, y, z],

  string = m_string:x -> [#string, x.slice(1, -1), x[0]],

  variable = '$' ident:x -> [#variable, x],

  combinator = ('+' | '>' | '~' | '&'):x -> [#combinator, x],

  property = (ident | variable):x sc* -> [#property, x],

  assignment = property:p '=' value:v decldelim? sc* -> [#assignment, p, v],

  primary = percentage | dimension | number,

  unary = ('-' | '+'):op primary:x -> [#unary, op, x]
        | primary,

  multiplicative = multiplicative:x sc+ ('*' | '/' | '%'):op sc+ unary:y -> [#binary, [#operator, op], x, y]
                 | unary,

  additive = additive:x sc+ ('+' | '-'):op sc+ multiplicative:y -> [#binary, [#operator, op], x, y]
           | multiplicative,

  expression = additive,

  nthselector = nthf:x '(' (sc | ('+' | '-'):op -> [#operator, op] | nth)*:y ')' -> [#nthselector, [#ident, x]].concat(y),

  blockdecl = sc* (filter | declaration):x decldelim? sc* -> [x]
            | sc* ruleset:x sc* -> [x]
            | sc* decldelim sc*
            | sc+,

  uri = seq('url(') sc* string:x sc* ')' -> CSSParser.concat([#uri], [x])
        | seq('url(') sc* (~')' ~m_w char)*:x sc* ')' -> CSSParser.concat([#uri], [[#raw, x.join('')]]),

  any = braces | string | expression | uri | functionExpression | funktion | ident | variable
}