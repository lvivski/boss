ometa CSSParser {

    // Macros

    m_comment = seq('/*') (~seq('*/') char)*:x seq('*/') -> ('/*' + x.join('') + '*/'),

    m_ident = '-' (char:x m_nmstart(x) -> x):x (escape | :y m_nmchar(y) -> y)*:z -> ('-' + x + z.join(''))
            | (char:x m_nmstart(x) -> x):x (escape | :y m_nmchar(y) -> y)*:z -> (x + z.join('')),

    escape = '\\' char:x -> ('\\' + x),

    m_name = (:x m_nmchar(x) -> x)+:xx -> xx.join(''),

    m_name2 = (:x m_nmchar2(x) -> x)+:xx -> xx.join(''),

    m_number = digit+:x '.' digit+:y -> (x.join('') + '.' + y.join(''))
             | '.' digit+:x -> ('.' + x.join(''))
             | digit+:x -> x.join(''),

    m_string = '"' (m_string_nl1 | ~'"' char)*:s '"' -> ('"' + s.join('') + '"')
             | '\'' (m_string_nl2 | ~'\'' char)*:s '\'' -> ('\'' + s.join('') + '\''),

    m_string_nl1 = ('\n' | '\r' | seq('\\"')):x -> x,
    m_string_nl2 = ('\n' | '\r' | seq('\\\'')):x -> x,

    m_nmstart :x = ?CSSParser._m_nmstart(x),
    m_unicode :x = ?CSSParser._m_unicode(x),
    m_escape :x = ?CSSParser._m_escape(x),
    m_nmchar :x = ?CSSParser._m_nmchar(x),
    m_nmchar2 :x = ?CSSParser._m_nmchar2(x),
    m_nl :x = ?CSSParser._m_nl(x),
    m_w :x = ?CSSParser._m_w(x),

    // Tokens

    ident = m_ident:x -> [#ident, x],

    atkeyword = '@' ident:x -> [#atkeyword, x],

    string = m_string:x -> [#string, x],

    shash = '#' m_name:x -> [#shash, x],

    vhash = '#' m_name2:x -> [#vhash, x],

    number = m_number:x -> [#number, x],

    percentage = number:x '%' -> [#percentage, x],

    dimension = number:x m_name2:y -> [#dimension, x, [#ident, y]],

    cdo = seq('<!--') -> [#cdo],
    cdc = seq('-->') -> [#cdc],

    s = (:x m_w(x) -> x)+:xx -> [#s, xx.join('')],

    attrselector = (seq('=') | seq('~=') | seq('^=') | seq('$=') | seq('*=') | seq('|=')):x -> [#attrselector, x],

    delim = ',' -> [#delim],

    comment = seq('/*') (~seq('*/') char)*:x seq('*/') -> [#comment, x.join('')],

    sc = s | comment,

    tset = vhash | any | sc | operator,

    stylesheet = (cdo | cdc | sc | statement)*:x -> CSSParser.concat([#stylesheet], x),

    statement = ruleset | atrule,

    atruleb = atkeyword:ak tset*:ap block:b -> CSSParser.concat([#atruleb, ak], ap, [b]),

    atrules = atkeyword:ak tset*:ap ';' -> CSSParser.concat([#atrules, ak], ap),

    atrulerq = tset*:ap -> [#atrulerq].concat(ap),

    atrulers = sc*:s0 ruleset*:r sc*:s1 -> CSSParser.concat([#atrulers], s0, r, s1),

    atruler = atkeyword:ak atrulerq:x '{' atrulers:y '}' -> [#atruler, ak, x, y],

    atrule = atruler | atruleb | atrules,

    blockdecl = sc*:s0 (filter | declaration):x decldelim:y sc*:s1 -> CSSParser.concat(s0, [x], [y], s1)
              | sc*:s0 (filter | declaration):x sc*:s1 -> CSSParser.concat(s0, [x], s1)
              | sc*:s0 decldelim:x sc*:s1 -> CSSParser.concat(s0, [x], s1)
              | sc+:s0 -> s0,

    decldelim = ';' -> [#decldelim],

    block = '{' blockdecl*:x '}' -> CSSParser.concatContent([#block], x),

    ruleset = selector*:x block:y -> CSSParser.concat([#ruleset], x, [y]),

    combinator = ('+' | '>' | '~'):x -> [#combinator, x],

    attrib = '[' sc*:s0 ident:x sc*:s1 attrselector:a sc*:s2 (ident | string):y sc*:s3 ']' -> CSSParser.concat([#attrib], s0, [x], s1, [a], s2, [y], s3)
           | '[' sc*:s0 ident:x sc*:s1 ']' -> CSSParser.concat([#attrib], s0, [x], s1),

    clazz = '.' ident:i -> [#clazz, i],

    pseudoe = seq('::') ident:x -> [#pseudoe, x],

    pseudoc = ':' (funktion | ident):x -> [#pseudoc, x],

    pseudo = pseudoe | pseudoc,

    nthf = ':' seq('nth-'):x (seq('child') | seq('last-child') | seq('of-type') | seq('last-of-type')):y -> (x + y),

    nth = (digit | 'n')+:x -> [#nth, x.join('')]
        | (seq('even') | seq('odd')):x -> [#nth, x],

    nthselector = nthf:x '(' (sc | unary | nth)*:y ')' -> [#nthselector, [#ident, x]].concat(y),

    namespace = '|' -> [#namespace],

    simpleselector = (nthselector | combinator | attrib | pseudo | clazz | shash | any | sc | namespace)+:x -> CSSParser.concatContent([#simpleselector], [x]),

    selector = (simpleselector | delim)+:x -> CSSParser.concat([#selector], x),

    declaration = property:x ':' value:y -> [#declaration, x, y],

    filterp = (seq('-filter') | seq('_filter') | seq('*filter') | seq('-ms-filter') | seq('filter')):t sc*:s0 -> CSSParser.concat([#property, [#ident, t]], s0),

    progid = sc*:s0 seq('progid:DXImageTransform.Microsoft.'):x letter+:y '(' (m_string | m_comment | ~')' char)+:z ')' sc*:s1
                -> CSSParser.concat([#progid], s0, [[#raw, x + y.join('') + '(' + z.join('') + ')']], s1),

    filterv = progid+:x -> [#filterv].concat(x),

    filter = filterp:x ':' filterv:y -> [#filter, x, y],

    property = ident:x sc*:s0 -> CSSParser.concat([#property, x], s0),

    important = '!' sc*:s0 seq('important') -> [#important].concat(s0),

    unary = ('-' | '+'):x -> [#unary, x],

    operator = ('/' | ',' | ':' | '='):x -> [#operator, x],

    uri = seq('url(') sc*:s0 string:x sc*:s1 ')' -> CSSParser.concat([#uri], s0, [x], s1)
        | seq('url(') sc*:s0 (~')' ~m_w char)*:x sc*:s1 ')' -> CSSParser.concat([#uri], s0, [[#raw, x.join('')]], s1),

    value = (sc | vhash | any | block | atkeyword | operator | important)+:x -> CSSParser.concat([#value], x),

    funktion = ident:x '(' functionBody:y ')' -> [#funktion, x, y],

    functionBody = (tset | clazz)*:x -> [#functionBody].concat(x),

    braces = '(' tset*:x ')' -> CSSParser.concat([#braces, '(', ')'], x)
           | '[' tset*:x ']' -> CSSParser.concat([#braces, '[', ']'], x),

// Don't reuse CSS-grammar elements to parse JS-grammar basics!

    jsLT = '\n' | '\r',

    jsComment = jsMLComment | jsSLComment,

    jsMLComment = ``/*'' (~``*/'' char)*:x ``*/'' -> ('/*' + x.join('') + '*/'),

    jsSLComment = ``//'' (~jsLT char)*:x -> ('//' + x.join('')),

    jsString = '"' jsDSChar*:x '"' -> ('"' + x.join('') + '"')
             | '\'' jsSSChar*:x '\'' -> ('\'' + x.join('') + '\''),

    jsDSChar = ~'"' ~'\\' ~jsLT char
             | jsEscapeChar
             | jsLineContinuation,

    jsSSChar = ~'\'' ~'\\' ~jsLT char
             | jsEscapeChar
             | jsLineContinuation,

    jsLineContinuation = '\\' jsLT*:x -> ('\\' + x.join('')),

    jsEscapeChar = '\\' char:x -> ('\\' + x),

    jsInBraceChar = ~'(' ~')' char:x -> x,

    jsBracesContent = (jsComment | jsString | jsEscapeChar | jsInBraceChar)+:x -> x.join(''),

    functionExpressionBody = '(' jsBracesContent*:x (
                                    functionExpressionBody:y jsBracesContent*:z -> (y + z.join(''))
                                 )*:xx
                             ')' -> ('(' + x.join('') + xx.join('') + ')')
               | jsBracesContent*:x functionExpressionBody:y jsBracesContent*:z -> (x.join('') + y + z.join(''))
               | jsBracesContent+:x -> x.join(''),

    functionExpression = ``expression('' functionExpressionBody*:x ')' -> [#functionExpression, x.join('')],

    any = braces | string | percentage | dimension | number | uri | functionExpression | funktion | ident | unary
}

CSSParser.concatContent = function(x, y) {
    y.forEach(function(e) {
        x = x.concat(e);
    });

    return x;
};

CSSParser.concat = function() {
    var x = [];
    for (var i in arguments) {
        x = x.concat(arguments[i]);
    };

    return x;
};

// CSS 2.1 / 4.1.1 Tokenization / macro section

// [_a-z]|{nonascii}|{escape}
CSSParser._m_nmstart = function(x) {
    return /^[_a-zA-Z\*]+$/.test(x) || this._m_escape(x);
};

// \\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?
CSSParser._m_unicode = function(x) {
    return /^\\[0-9a-fA-F]{1,6}(\r\n|[ \n\r\t\f])?$/.test(x);
};

// {unicode}|\\[^\n\r\f0-9a-f]
CSSParser._m_escape = function(x) {
    return this._m_unicode(x) || /^\\[^\n\r\f0-9a-fA-F]+$/.test(x);
}

// [_a-z0-9-]|{nonascii}|{escape}
CSSParser._m_nmchar = function(x) {
    return /^[_a-zA-Z0-9\-]+$/.test(x) || this._m_escape(x);
};

// [a-z0-9]|{nonascii}|{escape}
CSSParser._m_nmchar2 = function(x) {
    return /^[a-zA-Z0-9]+$/.test(x) || this._m_escape(x);
};

//  [\n\r\f]
CSSParser._m_nl = function(x) {
    return /^[\n\r\f]+$/.test(x);
};

// [ \t\r\n\f]*
CSSParser._m_w = function(x) {
    return /^[ \t\r\n\f]+$/.test(x);
};
