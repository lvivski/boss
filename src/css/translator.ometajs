ometa CSSTranslator {
    anys = any*,
    before = [],
    after = [],

    any = before
        | ident
        | atkeyword
        | string
        | shash
        | vhash
        | number
        | percentage
        | dimension
        | cdo
        | cdc
        | decldelim
        | s
        | attrselector
        | attrib
        | nth
        | nthselector
        | namespace
        | clazz
        | pseudoe
        | pseudoc
        | delim
        | stylesheet
        | atruleb
        | atrules
        | atrulerq
        | atrulers
        | atruler
        | block
        | ruleset
        | combinator
        | simpleselector
        | selector
        | declaration
        | property
        | important
        | unary
        | operator
        | braces
        | value
        | progid
        | filterv
        | filter
        | comment
        | uri
        | raw
        | functionBody
        | funktion
        | functionExpression
        | after,

    ident = ['ident' :x] -> x,

    atkeyword = ['atkeyword' any:x] -> ('@' + x),

    string = ['string' :x] -> x,

    shash = ['shash' :x] -> ('#' + x),

    vhash = ['vhash' :x] -> ('#' + x),

    number = ['number' :x] -> x,

    percentage = ['percentage' any:x] -> (x + '%'),

    dimension = ['dimension' any:x any:y] -> (x + y),

    cdo = ['cdo'] -> '<!--',

    cdc = ['cdc'] -> '-->',

    decldelim = ['decldelim'] -> ';',

    s = ['s' :x] -> x,

    attrselector = ['attrselector' :x] -> x,

    attrib = ['attrib' anys:x] -> ('[' + x.join('') + ']'),

    nth = ['nth' :x] -> x,

    nthselector = ['nthselector' any:x anys:y] -> (':' + x + '(' + y.join('') + ')'),

    namespace = ['namespace'] -> '|',

    clazz = ['clazz' any:x] -> ('.' + x),

    pseudoe = ['pseudoe' anys:x] -> ('::' + x.join('')),

    pseudoc = ['pseudoc' anys:x] -> (':' + x.join('')),

    delim = ['delim'] -> ',',

    stylesheet = ['stylesheet' anys:x] -> x.join(''),

    atruleb = ['atruleb' anys:x] -> x.join(''),

    atrules = ['atrules' anys:x] -> (x.join('') + ';'),

    atrulerq = ['atrulerq' anys:x] -> x.join(''),

    atrulers = ['atrulers' anys:x] -> x.join(''),

    atruler = ['atruler' any:x any:y any:z] -> (x + y + '{' + z + '}'),

    block = ['block' anys:x] -> ('{' + x.join('') + '}'),

    ruleset = ['ruleset' anys:x] -> x.join(''),

    combinator = ['combinator' :x] -> x,

    simpleselector = ['simpleselector' anys:x] -> x.join(''),

    selector = ['selector' anys:x] -> x.join(''),

    declaration = ['declaration' any:p any:v] -> (p + ':' + v),

    property = ['property' anys:x] -> x.join(''),

    important = ['important' anys:x] -> ('!' + x.join('') + 'important'),

    unary = ['unary' :x] -> x,

    operator = ['operator' :x] -> x,

    braces = ['braces' :x :y anys:z] -> (x + z.join('') + y),

    value = ['value' anys:x] -> x.join(''),

    progid = ['progid' anys:x] -> x.join(''),

    filterv = ['filterv' anys:x] -> x.join(''),

    filter = ['filter' any:p any:v] -> (p + ':' + v),

    comment = ['comment' :x] -> ('/*' + x + '*/'),

    uri = ['uri' anys:x] -> ('url(' + x.join('') + ')'),

    raw = ['raw' :x] -> x,

    functionBody = ['functionBody' anys:x] -> x.join(''),

    funktion = ['funktion' any:x any:y] -> (x + '(' + y + ')'),

    functionExpression = ['functionExpression' :x] -> ('expression(' + x + ')')
}
